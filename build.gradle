plugins {
	id 'fabric-loom' version '1.4-SNAPSHOT'
	id 'maven-publish'
	id "me.modmuss50.mod-publish-plugin" version "0.4.5"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = "${project.mod_version}+${stonecutter.current.version}"
group = project.maven_group

repositories {
	maven {
		url "https://maven.enjarai.dev/releases"
	}
	maven {
		url "https://maven.enjarai.dev/mirrors"
	}
	maven {
		url "https://maven.shedaniel.me/"
	}
	maven {
		url "https://maven.terraformersmc.com/"
	}
	maven { url 'https://maven.ladysnake.org/releases' }

	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
		content {
			includeGroup "maven.modrinth"
		}
	}
	mavenLocal()
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${stonecutter.current.version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cardinal_components_version}"
	modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cardinal_components_version}"
	modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-world:${project.cardinal_components_version}"

	modImplementation("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	modImplementation "maven.modrinth:gravity-api-fork:${project.gravitychanger_version}"

	modImplementation include("nl.enjarai:cicada-lib:${project.cicada_version}")
}

def minecraft_dep = ">=${project.property('min_target')}- <=${project.property('max_target')}"

processResources {
	filesMatching("fabric.mod.json") {
		expand "version": project.version, "minecraft_dep": minecraft_dep, "modrinth_id": project.modrinth_id,
				"curseforge_id": project.curseforge_id, "github_repo": project.github_repo
	}
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

if (stonecutter.current.isActive()) { // run configs for non-active version would be invalid
	loom {
		runConfigs.all {
			ideConfigGenerated = true // generate IDE tasks for running client, server and testmod, datagen if those are present
			runDir "../../run" // use a global run directory for all versions
		}
	}
}

loom {
	accessWidenerPath = file("../../src/main/resources/amethystgravity.accesswidener")
}

// configure the maven publication
publishing {
	repositories {
		maven {
			name = "enjaraiMaven"
			url = "https://maven.enjarai.nl/releases"
			credentials(PasswordCredentials)
			authentication {
				basic(BasicAuthentication)
			}
		}
	}

	publications {
		mavenJava(MavenPublication) {
			groupId = project.maven_group
			artifactId = archivesBaseName
			version = project.version

			from components.java
		}
	}
}

publishMods {
	file = remapJar.archiveFile
	displayName = "${project.mod_version} for ${stonecutter.current.version}"
	version = project.version
	changelog = getRootProject().file("CHANGELOG.md").text
	type = STABLE
	modLoaders.add("fabric")

	def min = project.min_target
	def max = project.max_target

	modrinth {
		projectId = project.modrinth_id
		accessToken = providers.gradleProperty('enjaraiModrinthToken').get()

		if (min == max) {
			minecraftVersions.add(min)
		} else {
			minecraftVersionRange {
				start = min
				end = max
			}
		}

		requires { slug = "fabric-api" }
		requires { slug = "gravity-api-fork" }
	}

	curseforge {
		projectId = project.curseforge_id
		accessToken = providers.gradleProperty('enjaraiCurseforgeToken').get()

		if (min == max) {
			minecraftVersions.add(min)
		} else {
			minecraftVersionRange {
				start = min
				end = max
			}
		}

		requires { slug = "fabric-api" }
	}

	github {
		repository = project.github_repo
		accessToken = providers.gradleProperty('enjaraiGithubToken').get()

		commitish = "master"
		tagName = project.version
	}
}
